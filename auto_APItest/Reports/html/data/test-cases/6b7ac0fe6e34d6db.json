{
  "uid" : "6b7ac0fe6e34d6db",
  "name" : "test_001",
  "fullName" : "TestCases.test_01.TestExchange#test_001",
  "historyId" : "4a9d004a8e65c30a9373e54d10e83892",
  "time" : {
    "start" : 1589343440333,
    "stop" : 1589343440529,
    "duration" : 196
  },
  "description" : "小额资产兑换测试",
  "descriptionHtml" : "<p>小额资产兑换测试</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <TestCases.test_01.TestExchange object at 0x039BF290>\n\n    @allure.severity('blocker')\n    @allure.story('兑换资产')\n    @allure.description('小额资产兑换测试')\n    @allure.link('www.baidu.com')\n    @allure.issue(('BUG编号:123'))\n    @allure.testcase('验证兑换资产是否成功')\n    def test_001(self):\n        '''\n        参数信息\n        :return:\n        '''\n    \n        #实例化配置文件读取类、断言类、测试数据类\n        config = Config()\n        data = Test()\n        _assert = Assert.Assert()\n        request = Requests.Request()\n        token = Token.Token().get_token()\n        #读取host,读取url,data,headers\n        host = config.front_host\n        urls = data.url\n        params = data.data\n        headers = data.header\n        headers[0]['Authorization'] = token\n    \n        allure.attach('用例参数:{0}'.format(params))\n        st('hello','world')\n        with allure.step(\"测试步骤调用\"):\n            allure.attach('失败','期望结果')\n    \n        api_url = host + urls[0]\n        response = request.post(url=api_url, data=params[0][0], headers=headers[0])\n    \n        assert _assert.assert_status(response['response_code'], 200)\n>       assert _assert.assert_in_body(response['response_body'], 'hhhh')\n\nTestCases\\test_01.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Utils.Assert.Assert object at 0x039BF530>\nbody = '{\"message\":\"兑换失败\",\"code\":1,\"result\":null}', assert_text = 'hhhh'\n\n    def assert_in_body(self,body,assert_text):\n        '''\n        响应信息断言\n        :data body:\n        :data assert_text:\n        :return:\n        '''\n        try:\n            #字段转换为字符串，ensure_ascii参数为输出是否为ASCII编码(序列化时中文默认使用ASCII编码)\n            text = json.dumps(body,ensure_ascii=False)\n>           assert assert_text in text\nE           AssertionError\n\nUtils\\Assert.py:54: AssertionError",
  "flaky" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "小额资产兑换测试",
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <TestCases.test_01.TestExchange object at 0x039BF290>\n\n    @allure.severity('blocker')\n    @allure.story('兑换资产')\n    @allure.description('小额资产兑换测试')\n    @allure.link('www.baidu.com')\n    @allure.issue(('BUG编号:123'))\n    @allure.testcase('验证兑换资产是否成功')\n    def test_001(self):\n        '''\n        参数信息\n        :return:\n        '''\n    \n        #实例化配置文件读取类、断言类、测试数据类\n        config = Config()\n        data = Test()\n        _assert = Assert.Assert()\n        request = Requests.Request()\n        token = Token.Token().get_token()\n        #读取host,读取url,data,headers\n        host = config.front_host\n        urls = data.url\n        params = data.data\n        headers = data.header\n        headers[0]['Authorization'] = token\n    \n        allure.attach('用例参数:{0}'.format(params))\n        st('hello','world')\n        with allure.step(\"测试步骤调用\"):\n            allure.attach('失败','期望结果')\n    \n        api_url = host + urls[0]\n        response = request.post(url=api_url, data=params[0][0], headers=headers[0])\n    \n        assert _assert.assert_status(response['response_code'], 200)\n>       assert _assert.assert_in_body(response['response_body'], 'hhhh')\n\nTestCases\\test_01.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Utils.Assert.Assert object at 0x039BF530>\nbody = '{\"message\":\"兑换失败\",\"code\":1,\"result\":null}', assert_text = 'hhhh'\n\n    def assert_in_body(self,body,assert_text):\n        '''\n        响应信息断言\n        :data body:\n        :data assert_text:\n        :return:\n        '''\n        try:\n            #字段转换为字符串，ensure_ascii参数为输出是否为ASCII编码(序列化时中文默认使用ASCII编码)\n            text = json.dumps(body,ensure_ascii=False)\n>           assert assert_text in text\nE           AssertionError\n\nUtils\\Assert.py:54: AssertionError",
    "steps" : [ {
      "name" : "步骤测试",
      "time" : {
        "start" : 1589343440400,
        "stop" : 1589343440400,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "a",
        "value" : "'hello'"
      }, {
        "name" : "b",
        "value" : "'world'"
      } ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "测试步骤调用",
      "time" : {
        "start" : 1589343440400,
        "stop" : 1589343440401,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "850d601c8c900e8e",
        "name" : "期望结果",
        "source" : "850d601c8c900e8e.attach",
        "type" : "text/plain",
        "size" : 6
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    } ],
    "attachments" : [ {
      "uid" : "7ec2eb89a08ebd0f",
      "name" : "78795d45-7a61-4af9-a5d6-1a645b908468-attachment.attach",
      "source" : "7ec2eb89a08ebd0f.attach",
      "type" : "text/plain",
      "size" : 131
    }, {
      "uid" : "a2bcc0859b15d201",
      "name" : "log",
      "source" : "a2bcc0859b15d201.txt",
      "type" : "text/plain",
      "size" : 881
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 2
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "小额资产兑换"
  }, {
    "name" : "severity",
    "value" : "blocker"
  }, {
    "name" : "story",
    "value" : "兑换资产"
  }, {
    "name" : "parentSuite",
    "value" : "TestCases"
  }, {
    "name" : "suite",
    "value" : "test_01"
  }, {
    "name" : "subSuite",
    "value" : "TestExchange"
  }, {
    "name" : "host",
    "value" : "DESKTOP-8TLGUH8"
  }, {
    "name" : "thread",
    "value" : "18532-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "TestCases.test_01"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "验证兑换资产是否成功",
    "url" : "验证兑换资产是否成功",
    "type" : "test_case"
  }, {
    "name" : "BUG编号:123",
    "url" : "BUG编号:123",
    "type" : "issue"
  }, {
    "name" : "www.baidu.com",
    "url" : "www.baidu.com",
    "type" : "link"
  } ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "blocker",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "6b7ac0fe6e34d6db.json",
  "parameterValues" : [ ]
}